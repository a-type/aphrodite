engine: sqlite
db: example

User as Node {
  id: ID<User>
  name: NaturalLanguage # & UserGenerated -- fields filled by users
  created: Timestamp # & Computed & Immutable
  modified: Timestamp
} & OutboundEdges {
  decks: Edge<Deck.ownerId>
} & Mutations {
  create {
    name
  } # & RateLimit { .. rate limit config .. }

  delete {}
} # & Visibility {} -- this refers to ability of users to _see_ the thing
# & Computability {} -- this refers to the ability of execution contexts to consume the thing
# & GraphQL {} -- expose what things to GraphQL clients
#  ^-- do we even need? If we allow clients to query in our generated query language
#    then we can just persist their plans and use those as our APIs
#  ^-- via generating "wire" clients
# & Triggers { typescript: ``, c#: ``, ...} -- would we want to do arbitrary code injection?

Deck as Node {
  id: ID<Deck>
  name: NaturalLanguage
  created: Timestamp
  modified: Timestamp
  ownerId: ID<User>
  selectedSlideId: ID<Slide>
} & OutboundEdges {
  owner: Edge<Deck.ownerId>
  slides: Edge<Slide.deckId>
  selectedSlide: Edge<Deck.selectedSlideId>
} & Mutations {
  create {
    name: NaturalLanguage
    owner: User
    selectedSlide: Slide | null
  }

  selectSlide {
    selectedSlide: Slide
  }

  rename {
    name: NaturalLanguage
  }

  delete {}
}

Slide as Node {
  id: ID<Slide>
  deckId: ID<Deck>
  order: float32
} & OutboundEdges {
  components: Edge<Component.slideId>
} & Mutations {
  create {
    deck: Deck
    order # if a param matches a field or edge name we infer the type
  }

  reorder {
    order: float32
  }

  delete {}
}

Component as Node {
  id: ID<Component>
  subtype: Enumeration<Text | Embed>
  slideId: ID<Slide>
  content: string
} & Mutations {
  create {
    subtype
    slide: Slide
    content
  }

  delete {}
}
